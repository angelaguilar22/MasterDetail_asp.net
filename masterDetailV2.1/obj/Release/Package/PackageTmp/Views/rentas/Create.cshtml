@model masterDetailV2._1.Models.RentasDetailsAndHeader

@{
    //ViewBag.Title = "Create";
}

<!-- INICIO DE SECCION DE SCRIPTS -->
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/bootstrap.min.js"></script>
<link href="~/Content/bootstrap.min.css" rel="stylesheet" />
<script src="~/Scripts/jquery.validate.min.js"></script>

<!-- INICIO DE LINKS Y SCRIPTS DE SWAL ALERT-->
<link href="~/Content/sweetalert.css" rel="stylesheet" />
<script src="~/Scripts/sweetalert.min.js" type="text/javascript"></script>

<!-- INICIO DE STYLOS PERSONALISADOS PAGE -->
<link rel="stylesheet" href="~/Content/popupAddProducto/alertM.css" />

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}


<div class="">

    <div class="form-horizontal">
        @Html.AntiForgeryToken()

            <div class="col-md-12" >
                <div class="col-md-12">
                    <h2>Rentas</h2>
                </div>
            </div>

            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="col-md-12">
                <div class="col-md-12" style="margin-top: 20px">
                    <!--<input type="submit" value="Create" class="btn btn-default" />-->
                    <button class="btn btn-primary" style="float: right; margin-bottom: 20px" id="saveRenta">Guardar</button>
                </div>
            </div>
            <br />

            <div class="col-md-12">
                <div class="col-md-4" style="margin-bottom: 15px">
                    <label class="control-label">Folio de renta</label>
                    @Html.EditorFor(model => model.renta.folio, new { htmlAttributes = new { @id = "rentaFolio", @class = "form-control", @placeholder = "Folio de renta" } })
                    @Html.ValidationMessageFor(model => model.renta.folio, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4" style="margin-bottom: 15px">
                    <label class="control-label">Fecha de renta</label>
                    @Html.EditorFor(model => model.renta.fechaRenta, new { htmlAttributes = new { @id = "rentaFechaRenta", @class = "form-control", @placeholder = "Fecha de renta" } })
                    @Html.ValidationMessageFor(model => model.renta.fechaRenta, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4" style="margin-bottom: 15px">
                    <label class="control-label">Fecha de vencimineto</label>
                    @Html.EditorFor(model => model.renta.fechaVence, new { htmlAttributes = new { @id = "rentaFechaVence", @class = "form-control", @placeholder = "Fecha de vencimiento" } })
                    @Html.ValidationMessageFor(model => model.renta.fechaVence, "", new { @class = "text-danger" })
                </div>

            </div>


            <div class="col-md-12">
                <div class="col-md-4">
                    <label class="control-label">Monto renta</label>
                    @Html.EditorFor(model => model.renta.total, new { htmlAttributes = new { @id = "rentaMontoTotal", @class = "form-control", @ReadOnly = "true", @placeholder = "Monto renta" } })
                    @Html.ValidationMessageFor(model => model.renta.total, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    <label class="control-label">Cantidad total productos</label>
                    @Html.EditorFor(model => model.renta.cantidadTotalProd, new { htmlAttributes = new { @id = "rentaProductosTotales", @class = "form-control", @ReadOnly = "true", @placeholder = "Productos totales" } })
                    @Html.ValidationMessageFor(model => model.renta.cantidadTotalProd, "", new { @class = "text-danger" })
                </div>

                <div class="col-md-4">
                    <label class="control-label">Subtotal</label>
                    @Html.EditorFor(model => model.renta.subtotal, new { htmlAttributes = new { @id = "rentaSubtotal", @class = "form-control", @ReadOnly = "true", @placeholder = "Subtotal" } })
                    @Html.ValidationMessageFor(model => model.renta.subtotal, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>

        <div class="col-md-12">
            <div class="col-md-12" style="margin-top: 0px;">
                <a href="#" class="btn btn-primary" onclick="addProducto(0)" style="margin-top: 30px; float: right"><span class='glyphicon glyphicon-plus'></span></a>

                <table class="table table-striped" style="margin-top: 20px">
                    <thead>
                        <tr>
                            <th>Nombre</th>
                            <th>Descripción</th>
                            <th>Marca</th>
                            <th>Numero de Serie</th>
                            <th>Estado Fisico</th>
                            <th>Precio Unitario</th>
                            <th>Cantidad</th>
                            <th>Unidad de Medida</th>
                            <th>Categoria</th>
                            <th>Subtotal</th>
                        </tr>

                    </thead>
                    <tbody id="produtosList">
                        <!--     inicio de seccion de listado de PRODUCTOS -->
                        <tr id="loadingStatus"></tr>
                    </tbody>
                </table>
            </div>

            <div class="col-md-12" style="margin-top: 10%; margin-bottom: 15px">
                @Html.ActionLink("Regresar al listado", "Index")
            </div>
        </div>

    </div>

<!-- SECCION DE MODAL PARA AGREGAR PRODUCTO -->
@*Create A Popup Modal With Registration Form For Add Or Edit Student Record*@


<div class="modal fade" id="MyModal" tabindex="-1">

    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">

            <div class="modal-header">
                <a href="#" class="close" data-dismiss="modal">&times;</a>
                <h4 id="ModalTitle"></h4>
            </div>

            <!-- inicio de cuerpo del popup -->
            <div class="modal-body">
                <form id="form" name="formProd">
                    <fieldset id="SubmitForm">
                        <!-- Datos a mostrar-->
                        @Html.HiddenFor(m => m.producto.id, new { @id = "prodId" })
                        @Html.HiddenFor(m => m.producto.nombre, new { @id = "prodName" })

                        <div class="form-group">
                            <label class="control-label col-md-2">Producto</label>
                            @Html.DropDownList("idProducto", null, "-- Selecciona Producto --", htmlAttributes: new { @id = "prodIdSelect", @class = "form-control", @onchange = "onProductochange(this.value)" })

                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Descpción</label>
                            @Html.TextBoxFor(m => m.producto.descripcion, new { @id = "prodDescripcion", @class = "form-control", @placeholder = "Descripcion", @ReadOnly = "true" })
                        </div>

                        <div class="form-group">
                            <label class="control-label col-md-2">Numero de Serie</label>
                            @Html.TextBoxFor(m => m.producto.numeroSerie, new { @id = "prodNmSerie", @class = "form-control", @placeholder = "Numero de Serie", @ReadOnly = "true" })
                        </div>


                        <div class="form-group">
                            <label class="control-label col-md-2">Precio</label>
                            @Html.TextBoxFor(m => m.producto.precioUnitario, new { @type = "number", @id = "prodPrecio", @class = "form-control", @placeholder = "Precio Unitario", @ReadOnly = "true" })
                        </div>


                        <div class="form-group">
                            <label class="control-label col-md-2">Cantidad</label>
                            @Html.TextBoxFor(m => m.producto.cantidad, new { @type = "number", @min = "0",@name ="nombre", @id = "prodCantidad", @class = "form-control", @placeholder = "Cantidad" })
                        </div>

                        @Html.HiddenFor(m => m.producto.tiposProductos.nombre, new { @id = "prodCategoria" })
                        @Html.HiddenFor(m => m.producto.marcasProd.nombre, new { @id = "prodMarca" })
                        @Html.HiddenFor(m => m.producto.unidadesMedida.nombre, new { @id = "prodUM" })
                        @Html.HiddenFor(m => m.producto.estadoFisico, new { @id = "prodEstadoFisico" })
                    </fieldset>
                </form>
            </div>
            <!-- Fin de cuerpo del popup -->
            <!-- Footer de popup -->
            <div class="modal-footer">
                <a href="#" class="btn btn-primary" id="SaveStudentRecord">Guardar</a>
                <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
            </div>
            <!-- Footer de popup -->

        </div>
    </div>
</div>

<!-- Archivos javascript personalizados -->
<script src="~/Scripts/popupAddProducto/onChangeEvents.js"></script>

<script type="text/javascript">
    // Funcion ejecutada cuando esta listo el HTML
    $(document).ready(function () {
        //swal("You select NO! Please select again!!", "", "warning");
    });

    // Listado de productos
    var listadoProductos = [];
    var actionButton = 0;

    //$("#loadingStatus").html("Cargando");

    // Funcion para cargar informacion a la GRID
    function cargarGrid(listadoProductos) {
        // Lmpeamos la GRID
        $("#produtosList").html('');

        // Objeto a enviar listado de Productos
        var SetData = $("#produtosList");

        // Generamosla GRID dinamicamente
        listadoProductos.forEach(producto => {

            // Generamos el elemento html a agregar a la GRID
            var Data = "<tr class='row_" + producto.id + "'>" +
                "<td>" + producto.nombre + "</td>" +
                "<td>" + producto.descripcion + "</td>" +
                "<td>" + producto.marca + "</td>" +
                "<td>" + producto.numeroSerie + "</td>" +
                "<td>" + producto.estadoFisico + "</td>" +
                "<td>" + producto.precioUnitario + "</td>" +
                "<td>" + producto.cantidad + "</td>" +
                "<td>" + producto.unidadMedida + "</td>" +
                "<td>" + producto.categoria + "</td>" +
                "<td>" + producto.subtotal + "</td>" +
                "<td>" + "<a href='#' class='btn btn-primary' onclick='editarProducto(" + producto.id + ")' ><span class='glyphicon glyphicon-edit'></span></a>" + "</td>" +
                "<td>" + "<a href='#' class='btn btn-danger' onclick='eliminarProducto(" + producto.id + ")'><span class='glyphicon glyphicon-trash'></span></a>" + "</td>" +
                "</tr>";

            // Cuerpo de la GRID
            SetData.append(Data);
        });
    }

    // Funcion pra mostrar el popup de add producto
    function addProducto(StudentId) {
        // Set accion a realizar en el formulario
        actionButton = 1;

        // Reseteamos las variiables del FORMULARIO
        deteleTagsErrors();
        $("#form")[0].reset();
        // Variables reset
        $("#prodIdSelect option:selected").text("-- Selecciona Producto --");
        $("#prodId").val("");

        // Datos del componente del fomulario
        $("#ModalTitle").html("Agregar Producto");
        $("#MyModal").modal();
    }


    // Funcion para agregar un PRODUCTO al listado
    $("#SaveStudentRecord").click(function () {
        let isValidForm = validateFormulario();
        console.log(isValidForm);

        if (isValidForm) {
            // Variable que obtiene la data del FORMULARIO
            var data1 = $("#SubmitForm").serializeArray();

            // Validadion para ver que accion se realizara dentro del formulario. 1.- Agregar, 2.- Edicion
            if (actionButton == 1) {
                console.log('furmulario de agregacion');

                // Creamos la estructura del objeto PRODUCTO
                let producto = {
                    id: data1[0].value,
                    nombre: data1[1].value,
                    descripcion: data1[3].value,
                    estadoFisico: data1[10].value,
                    precioUnitario: data1[5].value,
                    unidadMedida: data1[9].value,
                    numeroSerie: data1[4].value,
                    categoria: data1[7].value,
                    marca: data1[8].value,
                    cantidad: parseInt(data1[6].value),
                    subtotal: (parseFloat(data1[5].value) * parseFloat(data1[6].value))
                };
                console.log(data1);

                // Verificamos si el producto ya esta en la RENTA
                let productExistRenta = listadoProductos.find(item => item.id == producto.id);

                // Validamos si lo agregamos a la RENTA o solo agregamos la cantidad
                if (productExistRenta == undefined) {
                    // Agregamos el objeto PRODUCTO a LISTADO DE PRODUCTOS
                    listadoProductos.push(producto);
                } else {
                    // Actualizamos la cantidad
                    productExistRenta.cantidad = productExistRenta.cantidad + producto.cantidad;
                    // Actualizamos el subtotal del producto
                    productExistRenta.subtotal = productExistRenta.subtotal + producto.subtotal;
                }

                console.log('llenar ');
                // Init informacion de la grid
                cargarGrid(listadoProductos);
                // Calculamos el monto total de la RENTA
                calcularMontRenta(listadoProductos);

            } else if (actionButton == 2) {

                // Creamos la estructura del objeto PRODUCTO
                let producto = {
                    id: data1[0].value,
                    nombre: data1[1].value,
                    descripcion: data1[3].value,
                    estadoFisico: data1[10].value,
                    precioUnitario: data1[5].value,
                    unidadMedida: data1[9].value,
                    numeroSerie: data1[4].value,
                    categoria: data1[7].value,
                    marca: data1[8].value,
                    cantidad: parseInt(data1[6].value),
                    subtotal: (parseFloat(data1[5].value) * parseFloat(data1[6].value))
                };

                console.log(producto, 'Editar');

                // Buscamos el PRODUTO dentro del listado
                listadoProductos.forEach(item => {
                    if (item.id == producto.id) {
                        // Sustituimos el PRODUCTO con el producto editado
                        item.cantidad = producto.cantidad;
                        item.subtotal = producto.subtotal;
                        console.log(item, 'elementoo a editar');
                    }
                });

                // Init informacion de la grid (REFRESH INFORMACION)
                cargarGrid(listadoProductos);

                // Calculamos el monto total de la RENTA
                calcularMontRenta(listadoProductos);

                console.log('formulario de edicion ');
            }


            // Cerramos el modal cuendo se agrega el producto
            $("#MyModal").modal("hide");
            $("#loadingStatus").html(" ");
        }
    });


    // Funcion para editar el PRODUCTO
    function editarProducto(idProducto) {
        // Set accion a realizar en el formulario
        actionButton = 2;

        let productoEdit = listadoProductos.find(item => item.id == idProducto);

        if (productoEdit == undefined) {
            console.log('ALGO ANDA MAL CAMARITA');
        } else {

            console.log(productoEdit, 'PRODUCTOS A EDITAR');
            // Agregamos los valores del producto a el FORMULARIO
            // Set value of producto
            $("#prodId").val(productoEdit.id);
            $("#prodName").val(productoEdit.nombre);
            $("#prodDescripcion").val(productoEdit.descripcion);
            $("#prodNmSerie").val(productoEdit.numeroSerie);
            $("#prodPrecio").val(productoEdit.precioUnitario);
            $("#prodCategoria").val(productoEdit.categoria);
            $("#prodMarca").val(productoEdit.marca);
            $("#prodUM").val(productoEdit.unidadMedida);
            $("#prodEstadoFisico").val(productoEdit.estadoFisico);
            $("#prodCantidad").val(productoEdit.cantidad);

            $("#prodIdSelect option:selected").text(productoEdit.nombre);
            $("#prodIdSelect option:selected").val(productoEdit.id);

            // Datos del formulario para la EDITAR
            $("#ModalTitle").html("Editar Producto");
            $("#MyModal").modal();
        }
    }

    // Funcion para ELIMINAR PRODUCTO del Listado
    function eliminarProducto(idProducto) {
        let productoEliminarIndex = null;

        for (let i = 0; i < listadoProductos.length; i++) {
            if (listadoProductos[i].id == idProducto) {
                // Obtenemos el elemento a eliminar
                productoEliminarIndex = i;
            }
        }

        // Validamos que el elmento alla sido encontrado
        if (productoEliminarIndex == null) {
            console.log('ALGO SALIO MAL CAMARITA');
        } else {
            //Mesaje de confirmación
            swal({
                title: "Estas seguro de eliminar el producto?",
                text: "El producto se eliminara de la renta en cursoq",
                type: "warning",
                showCancelButton: true,
                confirmButtonClass: "btn-danger",
                confirmButtonText: "Sí",
                cancelButtonText: "No",
                closeOnConfirm: false,
                closeOnCancel: false
            },
                function (isConfirm) {
                    if (isConfirm) {
                        // Eliminamos el PRODCUTO
                        listadoProductos.splice(productoEliminarIndex, 1);

                        // Refresh informacion de la GRID
                        cargarGrid(listadoProductos);

                        // Calculamos el monto total de la RENTA
                        calcularMontRenta(listadoProductos);

                        console.log(listadoProductos, productoEliminarIndex);

                        // Mensaje de eliminado correctamneter
                        swal("Eliminado Correctamente", "", "success");
                    } else {
                        swal("Cancelado", "", "error");
                    }
                });

        }
    }

    // Funcion para obtener el valor del del select de productos
    function onProductochange(value) {
        console.log(value);
        if (value == '') {
            $("#prodId").val('');
            $("#prodName").val('');
            $("#prodDescripcion").val('');
            $("#prodNmSerie").val('');
            $("#prodPrecio").val('');
            $("#prodCategoria").val('');
            $("#prodMarca").val('');
            $("#prodUM").val('');
            $("#prodEstadoFisico").val('');
            $("#prodCantidad").val('');
            $("#prodIdSelect option:selected").val('');
            $("#prodIdSelect").val('');
        } else {
            // init peticion para obtener producto
            getProduct(value);
        }
    }

    // Funcion para obtener los datos completos del producto
    function getProduct(idProducto) {
        console.log(idProducto);
        if (idProducto == '' || idProducto == null || idProducto == undefined) {
        } else {
            $.ajax({
                url: 'http://localhost:50131/productos/GET_PRODUCT_BY_ID?id=' + idProducto,
                success: function (respuesta) {
                    console.log(respuesta);
                    // Set value of producto
                    $("#prodId").val(respuesta.id);
                    $("#prodName").val(respuesta.nombre);
                    $("#prodDescripcion").val(respuesta.descripcion);
                    $("#prodNmSerie").val(respuesta.numeroSerie);
                    $("#prodPrecio").val(respuesta.precioUnitario);
                    $("#prodCategoria").val(respuesta.categoria);
                    $("#prodMarca").val(respuesta.marca);
                    $("#prodUM").val(respuesta.unidadMedida);
                    $("#prodEstadoFisico").val(respuesta.estadoFisico);
                },
                error: function () {
                    console.log("No se ha podido obtener la información");
                }
            });
        }
    }

    // Funcion para calcular el MONTO TOTAL DE LA RENTA Y CANTIDAD DE PRODUCTOS RENTADOS
    function calcularMontRenta(listadoProductos) {
        let montoTotal = 0, productosTotales = 0;

        // Iteracion para calcular el monto de la renta
        listadoProductos.forEach(producto => {
            // Calculamos el monto de la renta
            montoTotal += producto.subtotal;
        });

        console.log(montoTotal, 'monto total de la renta');

        // Seteamos los valores de MONTO TOTAL Y PRODUCTOS TOTALES A LA RENTA
        $("#rentaMontoTotal").val(montoTotal);
        $("#rentaSubtotal").val(montoTotal);
        $("#rentaProductosTotales").val(listadoProductos.length);
    }

    // FUNCION PARA AGREGAR LA RENTA A BASE DE DATOS
    function agregarRenta(renta) {
        // Petion a backend para agregar la Recepcion a base de datos
        $.ajax({
            type: "POST",
            url: "http://localhost:50131/rentas/AgregarRenta",
            data: renta,
            //dataType: 'application/json',
            success: function (response) {
                console.log(response, 'Success');
                // Redireccionamos la pagina a el index
                window.location = "http://localhost:50131/rentas/index";
            },
            error: function (error) {
                console.log('Algo salio mal camarita al guardar la renta', error);
            }
        });
    }

    // Funcion para GUARDAR LA RENTA
    $("#saveRenta").click(() => {

        // Creacion de la estrutura de la RENTA (ENCABEZADO, DETALLES)
        let rentaEstructura = {
            //id: 1,
            folio: $("#rentaFolio").val(),
            fechaCreacion: null,
            fechaModificacion: null,
            fechaRenta: $("#rentaFechaRenta").val(),
            fechaVence: $("#rentaFechaVence").val(),
            subtotal: $("#rentaSubtotal").val(),
            total: $("#rentaMontoTotal").val(),
            listadoProducto: listadoProductos
        }
        console.log(listadoProductos);
        agregarRenta(rentaEstructura);
    });


    // Funcion para VALIDAR FORMULARIO
    function validateFormulario() {
        let contadorValidaciones = 0, cantidadValid = 2;

        var cantidad = $('#prodCantidad').val();
        var idProducto = $('#prodId').val();//prodIdSelect

        console.log(idProducto, 'ID--->');
        if (cantidad < 1) {
            $('#errorCantidad').remove();
            $('#prodCantidad').after('<span id="errorCantidad" class="error field-validation-erro">El campo cantidad es obligatorio.</span>');
        } else {
            $('#errorCantidad').remove();
            // Aumentamos el contador
            contadorValidaciones ++;
        }

        if (idProducto == 0 || idProducto == undefined || idProducto == null) {
            $('#errorIdprod').remove();
            $('#prodIdSelect').after('<span id="errorIdprod" class="error field-validation-erro">El campo producto es obligatorio.</span>');
        } else {
            $('#errorIdprod').remove();

            // Aumentamos el contador
            contadorValidaciones++;
        }

        console.log(contadorValidaciones);

        if (cantidadValid == contadorValidaciones) {
            return true;
        } else {
            return false;
        }
    }

    // Funcion para eliminar las etiquetas de SPAN error del POPUP
    function deteleTagsErrors() {
        $('#errorCantidad').remove();
        $('#errorIdprod').remove();
    }
</script>
